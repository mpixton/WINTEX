// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WINTEX.DAL;

namespace WINTEX.Migrations.FegbDb
{
    [DbContext(typeof(FEGBExcavationContext))]
    partial class FEGBExcavationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WINTEX.Models.BioSamplesNote", b =>
                {
                    b.Property<int>("BioNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(2L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("BioSampleId")
                        .HasColumnType("integer");

                    b.Property<string>("NoteBody")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("BioNoteId")
                        .HasName("BioSamplesNotes_pkey");

                    b.HasIndex(new[] { "BioSampleId" }, "fki_B");

                    b.ToTable("BioSamplesNotes");
                });

            modelBuilder.Entity("WINTEX.Models.BiologicalSample", b =>
                {
                    b.Property<int>("BioSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(1887L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BagNum")
                        .HasColumnType("integer");

                    b.Property<string>("BurialNum")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("ClusterNum")
                        .HasColumnType("integer");

                    b.Property<string>("Initials")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("MummyId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool?>("PreviouslySampled")
                        .HasColumnType("boolean");

                    b.Property<string>("RackNum")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int?>("SampledDay")
                        .HasColumnType("integer");

                    b.Property<string>("SampledMonth")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int?>("SampledYear")
                        .HasColumnType("integer");

                    b.Property<int?>("ShaftId")
                        .HasColumnType("integer");

                    b.HasKey("BioSampleId")
                        .HasName("BiologicalSamples_pkey");

                    b.HasIndex(new[] { "ShaftId" }, "fki_BiologicalSamples_LocationId_ShaftLocations");

                    b.HasIndex(new[] { "MummyId" }, "fki_BiologicalSamples_MummyId_Mummies");

                    b.ToTable("BiologicalSamples");
                });

            modelBuilder.Entity("WINTEX.Models.CarbonDating", b =>
                {
                    b.Property<int>("CarbonDatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(25L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AreaHillBurialNum")
                        .HasColumnType("integer");

                    b.Property<int?>("BurialNum")
                        .HasColumnType("integer");

                    b.Property<int?>("C14sample2017")
                        .HasColumnType("integer")
                        .HasColumnName("C14Sample2017");

                    b.Property<int?>("Calibrated95PerCalendarDateMax")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated95PerCalendarDateMin")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated95PerCalendarDateSpan")
                        .HasColumnType("integer")
                        .HasColumnName("Calibrated95PerCalendarDateSPAN");

                    b.Property<float?>("Calibrated95perCalendarDateAvg")
                        .HasColumnType("real")
                        .HasColumnName("Calibrated 95PerCalendarDateAvg");

                    b.Property<string>("Category")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("Conventional14CageBp")
                        .HasColumnType("integer")
                        .HasColumnName("Conventional14CAgeBP");

                    b.Property<string>("Description")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int?>("Foci")
                        .HasColumnType("integer");

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<int?>("MummyId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Questions")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Racknum")
                        .HasColumnType("integer");

                    b.Property<int?>("ShaftLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeMm")
                        .HasColumnType("integer")
                        .HasColumnName("Size_mm");

                    b.Property<int?>("TubeNum")
                        .HasColumnType("integer");

                    b.Property<int?>("_14ccalendarDate")
                        .HasColumnType("integer")
                        .HasColumnName("14CCalendarDate");

                    b.HasKey("CarbonDatingId");

                    b.HasIndex(new[] { "MummyId" }, "fki_CarbonDating_MummyId_Mummies");

                    b.HasIndex(new[] { "ShaftLocationId" }, "fki_CarbonDating_ShaftLocationIId_ShaftLocations");

                    b.ToTable("CarbonDating");
                });

            modelBuilder.Entity("WINTEX.Models.Fegbdatum", b =>
                {
                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Byusample")
                        .HasColumnType("boolean")
                        .HasColumnName("BYUSample");

                    b.Property<string>("DayOnSkull")
                        .HasColumnType("text");

                    b.Property<string>("FieldBook")
                        .HasColumnType("text");

                    b.Property<string>("FieldBookPageNum")
                        .HasColumnType("text");

                    b.Property<string>("MonthOnSkull")
                        .HasColumnType("text");

                    b.Property<bool?>("PostcraniaAtMagazine")
                        .HasColumnType("boolean");

                    b.Property<string>("Skull2018StudyAge")
                        .HasColumnType("text");

                    b.Property<string>("Skull2018StudySex")
                        .HasColumnType("text");

                    b.Property<bool?>("SkullAtMagazine")
                        .HasColumnType("boolean");

                    b.Property<string>("YearOnSkull")
                        .HasColumnType("text");

                    b.HasKey("MummyId")
                        .HasName("FEGBData_pkey");

                    b.ToTable("FEGBData");
                });

            modelBuilder.Entity("WINTEX.Models.FegbmummyStorage", b =>
                {
                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<int>("ShelfId")
                        .HasColumnType("integer");

                    b.HasKey("MummyId", "ShelfId")
                        .HasName("FEGBMummyStorage_pkey");

                    b.HasIndex(new[] { "MummyId" }, "fki_FEGBMummyStorage_MummyID_Mummies");

                    b.HasIndex(new[] { "ShelfId" }, "fki_FEGBMummyStorage_StorageId_FEGBStorage");

                    b.ToTable("FEGBMummyStorage");
                });

            modelBuilder.Entity("WINTEX.Models.FegbstorageLocation", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(474L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("Rack")
                        .HasColumnType("integer");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("SubShelf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("ShelfId")
                        .HasName("FEGBStorageLocations_pkey");

                    b.ToTable("FEGBStorageLocations");
                });

            modelBuilder.Entity("WINTEX.Models.Gisdatum", b =>
                {
                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<int?>("Gisid")
                        .HasColumnType("integer")
                        .HasColumnName("GISId");

                    b.Property<string>("MaturityCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WrappingCode")
                        .HasColumnType("text");

                    b.HasKey("MummyId")
                        .HasName("GISData_pkey");

                    b.ToTable("GISData");
                });

            modelBuilder.Entity("WINTEX.Models.HairColorCodes", b =>
                {
                    b.Property<string>("HairColorCode")
                        .HasColumnType("text");

                    b.Property<string>("HairColorDescription")
                        .HasColumnType("text");

                    b.HasKey("HairColorCode");

                    b.ToTable("HairColorCodes");
                });

            modelBuilder.Entity("WINTEX.Models.Mummy", b =>
                {
                    b.Property<int>("MummyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(1254L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgeCodeSingle")
                        .HasColumnType("text");

                    b.Property<bool?>("ArtifactFound")
                        .HasColumnType("boolean");

                    b.Property<string>("ArtifactsDescription")
                        .HasColumnType("text");

                    b.Property<decimal?>("BurialDepth")
                        .HasColumnType("numeric");

                    b.Property<string>("BurialMaterials")
                        .HasColumnType("text");

                    b.Property<string>("BurialNum")
                        .HasColumnType("text");

                    b.Property<string>("BurialSituation")
                        .HasColumnType("text");

                    b.Property<string>("ClusterNum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateExcavated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DayExcavated")
                        .HasColumnType("text");

                    b.Property<string>("ExcavationRecorder")
                        .HasColumnType("text");

                    b.Property<string>("Goods")
                        .HasColumnType("text");

                    b.Property<string>("HairColorCode")
                        .HasColumnType("text");

                    b.Property<string>("HeadDirection")
                        .HasColumnType("text");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("MonthExcavated")
                        .HasColumnType("text");

                    b.Property<bool?>("Photo")
                        .HasColumnType("boolean");

                    b.Property<string>("PreservationIndex")
                        .HasColumnType("text");

                    b.Property<int?>("ShaftId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SouthToFeet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SouthToHead")
                        .HasColumnType("numeric");

                    b.Property<int?>("TombId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WestToFeet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WestToHead")
                        .HasColumnType("numeric");

                    b.Property<string>("YearExcavated")
                        .HasColumnType("text");

                    b.HasKey("MummyId");

                    b.HasIndex(new[] { "ShaftId" }, "fki_Mummies_ShaftId_ShaftLocations");

                    b.HasIndex(new[] { "TombId" }, "fki_Mummies_TombId_TombLocations");

                    b.ToTable("Mummies");
                });

            modelBuilder.Entity("WINTEX.Models.MummyNote", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasIdentityOptions(2239L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<string>("NoteBody")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NoteType")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("NoteId")
                        .HasName("MummyNotes_pkey");

                    b.HasIndex(new[] { "MummyId" }, "fki_MummyNotes_MummyId_Mummies");

                    b.ToTable("MummyNotes");
                });

            modelBuilder.Entity("WINTEX.Models.OsteologicalMummyDatum", b =>
                {
                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<string>("BasilarSuture")
                        .HasColumnType("text");

                    b.Property<decimal?>("BasionBregmaHeight")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("BasionNasion")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("BasionProstionLength")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("BizygomaticDiameter")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<string>("BurialHairColor")
                        .HasColumnType("text");

                    b.Property<bool?>("ButtonOsteoma")
                        .HasColumnType("boolean");

                    b.Property<string>("CranialSuture")
                        .HasColumnType("text");

                    b.Property<bool?>("CribraOrbitala")
                        .HasColumnType("boolean");

                    b.Property<int?>("DorsalPitting")
                        .HasColumnType("integer");

                    b.Property<string>("EphiphysealUnion")
                        .HasColumnType("text");

                    b.Property<decimal?>("FemurHead")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("FemurLength")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<int?>("Gonian")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HumerusHead")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("HumerusLength")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("InterorbitalBreadth")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<bool?>("LinearHypoplasiaEnamel")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumCranialBreadth")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("MaximumCranialLength")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<decimal?>("MaximumNasalBreadth")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<int?>("MedialIpramus")
                        .HasColumnType("integer")
                        .HasColumnName("MedialIPRamus");

                    b.Property<bool?>("MetopicSuture")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("NasionProsthion")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<int?>("NuchalCrest")
                        .HasColumnType("integer");

                    b.Property<int?>("OrbitEdge")
                        .HasColumnType("integer");

                    b.Property<string>("OsteologyUnknownComment")
                        .HasColumnType("text");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("text");

                    b.Property<int?>("ParietalBossing")
                        .HasColumnType("integer");

                    b.Property<string>("PathologyAnomalies")
                        .HasColumnType("text");

                    b.Property<bool?>("PoroticHyperostosis")
                        .HasColumnType("boolean");

                    b.Property<string>("PoroticHyperostosisLocations")
                        .HasColumnType("text");

                    b.Property<bool?>("PostcraniaTrauma")
                        .HasColumnType("boolean");

                    b.Property<int?>("PreaurSulcus")
                        .HasColumnType("integer");

                    b.Property<int?>("PubicBone")
                        .HasColumnType("integer");

                    b.Property<string>("PubicSymphysis")
                        .HasColumnType("text");

                    b.Property<int?>("Robust")
                        .HasColumnType("integer");

                    b.Property<int?>("SciaticNotch")
                        .HasColumnType("integer");

                    b.Property<bool?>("SkullTrauma")
                        .HasColumnType("boolean");

                    b.Property<int?>("SubpubicAngle")
                        .HasColumnType("integer");

                    b.Property<int?>("SupraorbitalRidges")
                        .HasColumnType("integer");

                    b.Property<bool?>("TemporalMandibularJointOsteoarthritis")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TibiaLength")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)");

                    b.Property<bool?>("ToBeConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ToothAttrition")
                        .HasColumnType("text");

                    b.Property<string>("ToothEruption")
                        .HasColumnType("text");

                    b.Property<int?>("VentralArc")
                        .HasColumnType("integer");

                    b.Property<int?>("ZygomaticCrest")
                        .HasColumnType("integer");

                    b.HasKey("MummyId")
                        .HasName("OsteologicalMummydata_pkey");

                    b.ToTable("OsteologicalMummyData");
                });

            modelBuilder.Entity("WINTEX.Models.PostExhumationDatum", b =>
                {
                    b.Property<int>("MummyId")
                        .HasColumnType("integer");

                    b.Property<string>("AgeAtDeath")
                        .HasColumnType("text");

                    b.Property<string>("BodyAnalysis")
                        .HasColumnType("text");

                    b.Property<bool?>("BoneTaken")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BurialSampleTaken")
                        .HasColumnType("boolean");

                    b.Property<string>("DescriptionOfTaken")
                        .HasColumnType("text");

                    b.Property<decimal?>("EstimateLivingStature")
                        .HasPrecision(6, 3)
                        .HasColumnType("numeric(6,3)");

                    b.Property<string>("FaceBundle")
                        .HasColumnType("text");

                    b.Property<decimal?>("GefunctionTotal")
                        .HasPrecision(10, 5)
                        .HasColumnType("numeric(10,5)")
                        .HasColumnName("GEFunctionTotal");

                    b.Property<bool?>("HairTaken")
                        .HasColumnType("boolean");

                    b.Property<string>("PreservationNotes")
                        .HasColumnType("text");

                    b.Property<int?>("SampleNum")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("SexBodyCol")
                        .HasColumnType("text");

                    b.Property<string>("SexBurialMethod")
                        .HasColumnType("text");

                    b.Property<bool?>("SoftTissueTaken")
                        .HasColumnType("boolean");

                    b.Property<bool?>("TextileTaken")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ToothTaken")
                        .HasColumnType("boolean");

                    b.HasKey("MummyId")
                        .HasName("PostExhumationData_pkey");

                    b.ToTable("PostExhumationData");
                });

            modelBuilder.Entity("WINTEX.Models.ShaftLocation", b =>
                {
                    b.Property<int>("ShaftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(82L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<char?>("East")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("Lookup")
                        .HasMaxLength(22)
                        .HasColumnType("character(22)")
                        .IsFixedLength(true);

                    b.Property<char?>("North")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("Subplot")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .IsFixedLength(true);

                    b.Property<int?>("Xlower")
                        .HasColumnType("integer")
                        .HasColumnName("XLower");

                    b.Property<int?>("Xupper")
                        .HasColumnType("integer")
                        .HasColumnName("XUpper");

                    b.Property<int?>("Ylower")
                        .HasColumnType("integer")
                        .HasColumnName("YLower");

                    b.Property<int?>("Yupper")
                        .HasColumnType("integer")
                        .HasColumnName("YUpper");

                    b.HasKey("ShaftId")
                        .HasName("ShaftLocations_pkey");

                    b.ToTable("ShaftLocations");
                });

            modelBuilder.Entity("WINTEX.Models.TombLocation", b =>
                {
                    b.Property<int>("TombLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasIdentityOptions(9L, null, 0L, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AreaHillBurial")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("LookupValue")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Tomb")
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .IsFixedLength(true);

                    b.HasKey("TombLocationId");

                    b.ToTable("TombLocations");
                });

            modelBuilder.Entity("WINTEX.Models.BioSamplesNote", b =>
                {
                    b.HasOne("WINTEX.Models.BiologicalSample", "BioSample")
                        .WithMany("BioSamplesNotes")
                        .HasForeignKey("BioSampleId")
                        .HasConstraintName("BioSamplesNotes_BioSampleId_BiologicalSamples")
                        .IsRequired();

                    b.Navigation("BioSample");
                });

            modelBuilder.Entity("WINTEX.Models.BiologicalSample", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithMany("BiologicalSamples")
                        .HasForeignKey("MummyId")
                        .HasConstraintName("BiologicalSamples_MummyId_Mummies");

                    b.HasOne("WINTEX.Models.ShaftLocation", "Shaft")
                        .WithMany("BiologicalSamples")
                        .HasForeignKey("ShaftId")
                        .HasConstraintName("BiologicalSamples_LocationId_ShaftLocations");

                    b.Navigation("Mummy");

                    b.Navigation("Shaft");
                });

            modelBuilder.Entity("WINTEX.Models.CarbonDating", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithMany("CarbonDatings")
                        .HasForeignKey("MummyId")
                        .HasConstraintName("CarbonDating_MummyId_Mummies");

                    b.HasOne("WINTEX.Models.ShaftLocation", "ShaftLocation")
                        .WithMany("CarbonDatings")
                        .HasForeignKey("ShaftLocationId")
                        .HasConstraintName("CarbonDating_ShaftLocationIId_ShaftLocations");

                    b.Navigation("Mummy");

                    b.Navigation("ShaftLocation");
                });

            modelBuilder.Entity("WINTEX.Models.Fegbdatum", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithOne("Fegbdatum")
                        .HasForeignKey("WINTEX.Models.Fegbdatum", "MummyId")
                        .HasConstraintName("FEGBData_MummyId_Mummies")
                        .IsRequired();

                    b.Navigation("Mummy");
                });

            modelBuilder.Entity("WINTEX.Models.FegbmummyStorage", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithMany("FegbmummyStorages")
                        .HasForeignKey("MummyId")
                        .HasConstraintName("FEGBMummyStorage_MummyID_Mummies")
                        .IsRequired();

                    b.HasOne("WINTEX.Models.FegbstorageLocation", "Shelf")
                        .WithMany("FegbmummyStorages")
                        .HasForeignKey("ShelfId")
                        .HasConstraintName("FEGBMummyStorage_StorageId_FEGBStorage")
                        .IsRequired();

                    b.Navigation("Mummy");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("WINTEX.Models.Gisdatum", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithOne("Gisdatum")
                        .HasForeignKey("WINTEX.Models.Gisdatum", "MummyId")
                        .HasConstraintName("GISData_MummyId_Mummies")
                        .IsRequired();

                    b.Navigation("Mummy");
                });

            modelBuilder.Entity("WINTEX.Models.Mummy", b =>
                {
                    b.HasOne("WINTEX.Models.ShaftLocation", "Shaft")
                        .WithMany("Mummies")
                        .HasForeignKey("ShaftId")
                        .HasConstraintName("Mummies_ShaftId_ShaftLocations");

                    b.HasOne("WINTEX.Models.TombLocation", "Tomb")
                        .WithMany("Mummies")
                        .HasForeignKey("TombId")
                        .HasConstraintName("Mummies_TombId_TombLocations");

                    b.Navigation("Shaft");

                    b.Navigation("Tomb");
                });

            modelBuilder.Entity("WINTEX.Models.MummyNote", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithMany("MummyNotes")
                        .HasForeignKey("MummyId")
                        .HasConstraintName("MummyNotes_MummyId_Mummies")
                        .IsRequired();

                    b.Navigation("Mummy");
                });

            modelBuilder.Entity("WINTEX.Models.OsteologicalMummyDatum", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithOne("OsteologicalMummyDatum")
                        .HasForeignKey("WINTEX.Models.OsteologicalMummyDatum", "MummyId")
                        .HasConstraintName("OsteologicalMummyData_MummyId_Mummies")
                        .IsRequired();

                    b.Navigation("Mummy");
                });

            modelBuilder.Entity("WINTEX.Models.PostExhumationDatum", b =>
                {
                    b.HasOne("WINTEX.Models.Mummy", "Mummy")
                        .WithOne("PostExhumationDatum")
                        .HasForeignKey("WINTEX.Models.PostExhumationDatum", "MummyId")
                        .HasConstraintName("PostExhumationData_MummyId_Mummies")
                        .IsRequired();

                    b.Navigation("Mummy");
                });

            modelBuilder.Entity("WINTEX.Models.BiologicalSample", b =>
                {
                    b.Navigation("BioSamplesNotes");
                });

            modelBuilder.Entity("WINTEX.Models.FegbstorageLocation", b =>
                {
                    b.Navigation("FegbmummyStorages");
                });

            modelBuilder.Entity("WINTEX.Models.Mummy", b =>
                {
                    b.Navigation("BiologicalSamples");

                    b.Navigation("CarbonDatings");

                    b.Navigation("Fegbdatum");

                    b.Navigation("FegbmummyStorages");

                    b.Navigation("Gisdatum");

                    b.Navigation("MummyNotes");

                    b.Navigation("OsteologicalMummyDatum");

                    b.Navigation("PostExhumationDatum");
                });

            modelBuilder.Entity("WINTEX.Models.ShaftLocation", b =>
                {
                    b.Navigation("BiologicalSamples");

                    b.Navigation("CarbonDatings");

                    b.Navigation("Mummies");
                });

            modelBuilder.Entity("WINTEX.Models.TombLocation", b =>
                {
                    b.Navigation("Mummies");
                });
#pragma warning restore 612, 618
        }
    }
}
